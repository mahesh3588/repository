/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.sales;

import beans.Customer;
import beans.CustomerLedger;
import beans.Item;
import beans.Ledger;
import beans.Order;
import beans.SoldItem;
import beans.Stock;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Date;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import services.billing.BillingClient;
import services.item.ItemClient;
import services.item.stocks.StockClient;
import services.ledger.LedgerClient;
import view.customer.CustomerSearch;

/**
 *
 * @author Owner
 */
public class SalesPanel extends javax.swing.JPanel {

    static List<Object> itemsList;
    static List<Object> itemsStock;
    private DefaultTableModel itemTableTableModel;

    private Integer billingRowCount = 0;
    
    HashMap<Integer, Integer> billingItems;
    HashMap<Integer, HashMap<String,Double>> billingItemsDetails;
    Double grossBillAmount=0.0,netBillAmount=0.0;
  
    DecimalFormat decimalFormat=new DecimalFormat(".##");
    
    /**
     * Creates new form SalesPanel
     */
    public SalesPanel() {
        initComponents();
        try {
            initBillingComponent();
            loadItemTable();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to load the data");
        }
    }


//    private Integer getItemId(Integer itemId){
//        int availableStock=0;
//        try {
//            if(itemsStock!=null && itemsStock.size()>0){
//                for(Object stockObject : itemsStock){
//                    Stock stock=(Stock)stockObject;
//                    if(stock.getItemId()==itemId.intValue()){
//                        availableStock=stock.getAvailableStock();
//                        break;
//                    }
//                }
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return availableStock;
//    }
//    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        menuPanel = new javax.swing.JPanel();
        bodyPanel = new javax.swing.JPanel();
        panelHead = new javax.swing.JPanel();
        labelHead = new javax.swing.JLabel();
        panelCustomer = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textCustomerId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textCustomerName = new javax.swing.JTextField();
        buttonSearchCustomer = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        textContact1 = new javax.swing.JTextField();
        textContact2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textAddress = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textBalance = new javax.swing.JTextField();
        panelSearch = new javax.swing.JPanel();
        panelItems = new javax.swing.JPanel();
        textItemName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableItems = new javax.swing.JTable();
        addItem = new javax.swing.JButton();
        panelBillMemo = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableBillItems = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textBillAmount = new javax.swing.JTextField();
        textPreviousBalance = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textTotalBalnce = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textPaidAmount = new javax.swing.JTextField();
        buttonBill = new javax.swing.JButton();
        buttonQuotation = new javax.swing.JButton();
        labelProfit = new javax.swing.JLabel();
        buttonReset = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        textDiscount = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        textGrossTotal = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(102, 255, 255));

        menuPanel.setBackground(new java.awt.Color(51, 153, 255));

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 89, Short.MAX_VALUE)
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        bodyPanel.setBackground(new java.awt.Color(204, 204, 255));

        panelHead.setBackground(new java.awt.Color(204, 255, 204));

        labelHead.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelHead.setText("Sales");

        javax.swing.GroupLayout panelHeadLayout = new javax.swing.GroupLayout(panelHead);
        panelHead.setLayout(panelHeadLayout);
        panelHeadLayout.setHorizontalGroup(
            panelHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHeadLayout.createSequentialGroup()
                .addGap(311, 311, 311)
                .addComponent(labelHead, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelHeadLayout.setVerticalGroup(
            panelHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHeadLayout.createSequentialGroup()
                .addComponent(labelHead)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jLabel1.setText("Customer Id");

        textCustomerId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textCustomerIdFocusLost(evt);
            }
        });
        textCustomerId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textCustomerIdKeyPressed(evt);
            }
        });

        jLabel2.setText("Customer Name");

        textCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCustomerNameActionPerformed(evt);
            }
        });

        buttonSearchCustomer.setText("Search Customer");
        buttonSearchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchCustomerActionPerformed(evt);
            }
        });

        jLabel3.setText("Contact ");

        jLabel4.setText("Address");

        jLabel5.setText("Ledger Balance");

        textBalance.setEditable(false);
        textBalance.setBackground(new java.awt.Color(255, 255, 255));
        textBalance.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textBalance.setForeground(new java.awt.Color(255, 0, 0));

        panelSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelSearch.setLayout(null);

        javax.swing.GroupLayout panelCustomerLayout = new javax.swing.GroupLayout(panelCustomer);
        panelCustomer.setLayout(panelCustomerLayout);
        panelCustomerLayout.setHorizontalGroup(
            panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCustomerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCustomerLayout.createSequentialGroup()
                        .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(panelCustomerLayout.createSequentialGroup()
                                .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(textCustomerId))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonSearchCustomer))
                            .addComponent(textCustomerName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(textContact1)
                            .addComponent(textContact2, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(textAddress)
                    .addComponent(textBalance, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelCustomerLayout.setVerticalGroup(
            panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCustomerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCustomerLayout.createSequentialGroup()
                        .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonSearchCustomer)
                            .addComponent(textContact1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textContact2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCustomerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        panelItems.setBorder(javax.swing.BorderFactory.createTitledBorder("Items"));

        textItemName.setForeground(new java.awt.Color(204, 204, 204));
        textItemName.setText("Search Item Here");
        textItemName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textItemNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textItemNameFocusLost(evt);
            }
        });
        textItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textItemNameActionPerformed(evt);
            }
        });
        textItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textItemNameKeyTyped(evt);
            }
        });

        tableItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Stock", "VAT", "Discount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableItemsKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableItems);

        addItem.setText("Add Item");
        addItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelItemsLayout = new javax.swing.GroupLayout(panelItems);
        panelItems.setLayout(panelItemsLayout);
        panelItemsLayout.setHorizontalGroup(
            panelItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textItemName)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
            .addGroup(panelItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addItem)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelItemsLayout.setVerticalGroup(
            panelItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelItemsLayout.createSequentialGroup()
                .addComponent(textItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addItem)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        panelBillMemo.setBorder(javax.swing.BorderFactory.createTitledBorder("Billing Items Memo"));

        tableBillItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SR", "Item Name", "Qunatity", "Price", "Discount", "Gross Amount", "Net Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableBillItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableBillItemsMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableBillItemsMouseReleased(evt);
            }
        });
        tableBillItems.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tableBillItemsPropertyChange(evt);
            }
        });
        tableBillItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableBillItemsKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableBillItems);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Bill Amount");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Previous Balance");

        textBillAmount.setEditable(false);
        textBillAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        textPreviousBalance.setEditable(false);
        textPreviousBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        textPreviousBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPreviousBalanceActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Total Balance");

        textTotalBalnce.setEditable(false);
        textTotalBalnce.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Payment Amount");

        textPaidAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        buttonBill.setText("Generate Bill");
        buttonBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBillActionPerformed(evt);
            }
        });

        buttonQuotation.setText("Quotation");
        buttonQuotation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonQuotationActionPerformed(evt);
            }
        });

        labelProfit.setText("0");

        buttonReset.setText("Reset");
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Discount");

        textDiscount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        textDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textDiscountActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Gross Total");

        textGrossTotal.setEditable(false);
        textGrossTotal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        textGrossTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textGrossTotalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBillMemoLayout = new javax.swing.GroupLayout(panelBillMemo);
        panelBillMemo.setLayout(panelBillMemoLayout);
        panelBillMemoLayout.setHorizontalGroup(
            panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
            .addGroup(panelBillMemoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBillMemoLayout.createSequentialGroup()
                        .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonBill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonQuotation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBillMemoLayout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                                    .addComponent(textBillAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBillMemoLayout.createSequentialGroup()
                                    .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(textPaidAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                        .addComponent(textTotalBalnce, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(textPreviousBalance, javax.swing.GroupLayout.Alignment.LEADING))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBillMemoLayout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBillMemoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelProfit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBillMemoLayout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textGrossTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        panelBillMemoLayout.setVerticalGroup(
            panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBillMemoLayout.createSequentialGroup()
                .addComponent(labelProfit)
                .addGap(13, 13, 13)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBillMemoLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(buttonBill)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonQuotation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonDelete)
                        .addContainerGap(38, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBillMemoLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(textGrossTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(textDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(textBillAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textPreviousBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(textTotalBalnce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBillMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textPaidAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout bodyPanelLayout = new javax.swing.GroupLayout(bodyPanel);
        bodyPanel.setLayout(bodyPanelLayout);
        bodyPanelLayout.setHorizontalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelHead, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(bodyPanelLayout.createSequentialGroup()
                        .addComponent(panelItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelBillMemo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        bodyPanelLayout.setVerticalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelHead, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelBillMemo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void textCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCustomerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCustomerNameActionPerformed

    private void textItemNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textItemNameFocusGained
        textItemName.setText("");
    }//GEN-LAST:event_textItemNameFocusGained

    private void textCustomerIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textCustomerIdFocusLost
        loadCustomerDetail();
    }//GEN-LAST:event_textCustomerIdFocusLost

    private void textCustomerIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textCustomerIdKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            loadCustomerDetail();
        }
    }//GEN-LAST:event_textCustomerIdKeyPressed

    private void textItemNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textItemNameKeyTyped
        if(textItemName.getText().length()>1){
            System.out.println("tyoed");
            textItemName.setForeground(Color.GRAY);
            searchItem();
        }
        
//        if(textItemName.getText().length()==0){
//           try {
//               textItemName.setText("Search Item Here");
//               textItemName.setForeground(Color.GRAY);
//               loadItemTable();
//           } catch (Exception ex) {
//               Logger.getLogger(SalesPanel.class.getName()).log(Level.SEVERE, null, ex);
//           }
//       }
       
        
    }//GEN-LAST:event_textItemNameKeyTyped

    private void textItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textItemNameActionPerformed

    
      private void searchItem() {
        // Search Item Here
            String searchKey=textItemName.getText();
            textItemName.setForeground(Color.black);
            List<Object> foundItemsList=new ArrayList<Object>();
            Pattern searchPattern=Pattern.compile(searchKey.toLowerCase());
            for(Object itemObject:itemsList){
                Item item=(Item)itemObject;
                Matcher patternMatcher=searchPattern.matcher(item.getName().toLowerCase());
                if(patternMatcher.find()){
                    foundItemsList.add(item);
                }
            }
            
//            Stream<Object> itemListStream=itemsList.stream();
//            foundItemsList= itemListStream.filter(item->((Item)item).getName().contains(searchKey)).collect(Collectors.toList());
//            
            //System.out.println("size : "+foundItemsList.size());
            if(foundItemsList.size()>0){
                itemTableTableModel = (DefaultTableModel) tableItems.getModel();
                itemTableTableModel.setRowCount(foundItemsList.size());
                tableItems.setModel(itemTableTableModel);
                int row = 0;
                for(Object itemObj: foundItemsList) {
                    Item item=(Item)itemObj;
                    tableItems.setValueAt(item.getName(), row, 0);
                    tableItems.setValueAt(getStock(item.getId()), row, 1);
                    tableItems.setValueAt(item.getVat(), row, 2);
                    tableItems.setValueAt(item.getDiscount(), row, 3);
                    row++;
                }
                
//                foundItemsList.stream().forEach(itemObject ->{ 
//                    Item item=(Item)itemObject;
//                    //item.get
//                    tableItems.setValueAt(item.getName(), row, 0);
//                    tableItems.setValueAt(getStock(item.getId()), row, 1);
//                    tableItems.setValueAt(item.getVat(), row, 2);
//                    tableItems.setValueAt(item.getDiscount(), row, 3);
//                    row++;
//                });
                
            }
    }

    
    
    private void buttonSearchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchCustomerActionPerformed
       CustomerSearch panelCustomerSearch=new CustomerSearch();
       panelCustomerSearch.setLocation(100, 30);
       panelCustomerSearch.setSize(400, 128);
       
       panelSearch.setLayout(new BorderLayout());
       panelSearch.add(panelCustomerSearch);
       panelSearch.repaint();
       panelSearch.revalidate();
       panelCustomerSearch.repaint();
       panelCustomerSearch.revalidate();
               
    }//GEN-LAST:event_buttonSearchCustomerActionPerformed

    
    private void addItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemActionPerformed
        //int selectedRow = tableItems.getSelectedRow();
        if(textCustomerId.getText().equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(null, "You have not mentioned the customer details");
        }else{
            int selectedRow = tableItems.getSelectedRow();
            String itemName = (String) tableItems.getValueAt(selectedRow, 0);
            Integer itemQuantity = (Integer)tableItems.getValueAt(selectedRow, 1);
            
            addItemToBillingTable(itemName,itemQuantity);
        }
        //JOptionPane.showMessageDialog(null, itemName);
    }//GEN-LAST:event_addItemActionPerformed

    private void textItemNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textItemNameFocusLost
        try {
            if(textItemName.getText().equalsIgnoreCase("")){
                 textItemName.setText("Search Item Here");
                 textItemName.setForeground(Color.GRAY);
                 loadItemTable();
            }
           
        } catch (Exception ex) {
            Logger.getLogger(SalesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_textItemNameFocusLost

    private void tableItemsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableItemsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (textCustomerId.getText().equalsIgnoreCase("")) {
                JOptionPane.showMessageDialog(null, "You have not mentioned the customer details");
            } else {
                int selectedRow = tableItems.getSelectedRow();
                String itemName = (String) tableItems.getValueAt(selectedRow, 0);
                Integer itemQuantity = (Integer) tableItems.getValueAt(selectedRow, 1);
                addItemToBillingTable(itemName, itemQuantity);
                
                try {
                    textItemName.setText("Search Item Here");
                    textItemName.setForeground(Color.GRAY);
                    loadItemTable(); // just to reset item table
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
                
            }
        }
    }//GEN-LAST:event_tableItemsKeyPressed

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        resetPanel();
    }//GEN-LAST:event_buttonResetActionPerformed

    private void buttonQuotationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonQuotationActionPerformed
        Order order=buidOrder();
        if(order!=null){
            int quotationId= new BillingClient().generateQuotation(order);
            System.out.println("Qoutation id = "+quotationId);
            // do printing logic here
            JFrame bill = new JFrame();
            bill.setSize(Toolkit.getDefaultToolkit().getScreenSize());
            BillPanel billPanel = new BillPanel(quotationId);
            bill.add(billPanel);
            //bill.setSize(billPanel.getSize());
            bill.setVisible(true);
            resetPanel();
        }else{
            
        }
    }//GEN-LAST:event_buttonQuotationActionPerformed

    private void buttonBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBillActionPerformed
        Order order=buidOrder();
        if(order!=null){
            int invoiceNo= new BillingClient().generateBill(order);
            // do printing logic here
            JFrame bill = new JFrame();
            bill.setSize(Toolkit.getDefaultToolkit().getScreenSize());
            BillPanel billPanel = new BillPanel(Integer.parseInt(textCustomerId.getText()),invoiceNo);
            bill.add(billPanel);
            //bill.setSize(billPanel.getSize());
            bill.setVisible(true);
            resetPanel();
        }
    }//GEN-LAST:event_buttonBillActionPerformed

    private void textPreviousBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPreviousBalanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPreviousBalanceActionPerformed

    private void tableBillItemsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableBillItemsKeyPressed

    }//GEN-LAST:event_tableBillItemsKeyPressed

    private void tableBillItemsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBillItemsMouseReleased
        //JOptionPane.showMessageDialog(null, "Released");
    }//GEN-LAST:event_tableBillItemsMouseReleased

    private void tableBillItemsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBillItemsMousePressed
        // JOptionPane.showMessageDialog(null, "Pressed");
    }//GEN-LAST:event_tableBillItemsMousePressed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        DefaultTableModel defaultTableModel=(DefaultTableModel)tableBillItems.getModel();
        int selectedRow = tableBillItems.getSelectedRow();
        Double itemTotal=(Double)tableBillItems.getValueAt(selectedRow, 6);
        textBillAmount.setText(((Double.parseDouble(textBillAmount.getText()))-itemTotal)+"");
        textTotalBalnce.setText(((Double.parseDouble(textTotalBalnce.getText()))-itemTotal)+"");
        textPaidAmount.setText("");
        billingItems.remove(getItemID(tableBillItems.getValueAt(selectedRow, 1).toString()));
        defaultTableModel.removeRow(selectedRow);
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void tableBillItemsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tableBillItemsPropertyChange
       //JOptionPane.showMessageDialog(null, "Changed");
    }//GEN-LAST:event_tableBillItemsPropertyChange

    private void textDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textDiscountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textDiscountActionPerformed

    private void textGrossTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textGrossTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textGrossTotalActionPerformed

    private void resetPanel(){
        try {
            this.removeAll();
            initComponents();
            initBillingComponent();
            loadItemTable();
            this.updateUI();
        } catch (Exception ex) {
            Logger.getLogger(SalesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    
    private void addItemToBillingTable(String itemName,Integer availableQuantity) {
        Integer itemQuantity = 0;
        String qnty ="";// JOptionPane.showInputDialog(null, "Please enter quantity for " + itemName);
        while(qnty.equalsIgnoreCase("")) {
            qnty = JOptionPane.showInputDialog(null, "Please enter quantity for " + itemName);
        } 
        itemQuantity = Integer.parseInt(qnty);
        
        if(availableQuantity>=itemQuantity){
            for (Object itemObject : itemsList) {
                Item item = (Item) itemObject;
                if (item.getName().equalsIgnoreCase(itemName)) {

                    DefaultTableModel billingTablemodel = (DefaultTableModel) tableBillItems.getModel();
                    if (billingItems.containsKey(item.getId())) {
                        int additionalQuantity=itemQuantity;
                        itemQuantity=billingItems.get(item.getId()) + itemQuantity;
                        billingItems.put(item.getId(), itemQuantity);
                        int i=0;
                        while(i<=billingRowCount){
                            if(itemName.equalsIgnoreCase(tableBillItems.getValueAt(i, 1).toString())){
                                //double grossTotal=Double.parseDouble(decimalFormat.format(item.getSalePrice()*itemQuantity));
                                //double netItemTotal=Double.parseDouble(decimalFormat.format((grossTotal - ((grossTotal*item.getDiscount())/100))));
                                //netBillAmount=Double.parseDouble(textBillAmount.getText())+((item.getSalePrice()*item.getDiscount()/100)*additionalQuantity);
                                double grossTotal=Double.parseDouble(decimalFormat.format(item.getSalePrice()*itemQuantity));
                                double netItemTotal=Double.parseDouble(decimalFormat.format((grossTotal - ((grossTotal*item.getDiscount())/100))));
                                double prevBalance=0.0;
                                double totalBalance=0.0;
                                double oldItemTotal=Double.parseDouble(tableBillItems.getValueAt(i, 6).toString());
                                double oldGrossItemTotal=Double.parseDouble(tableBillItems.getValueAt(i, 5).toString());
                                grossBillAmount=grossBillAmount+grossTotal-oldGrossItemTotal;
                                netBillAmount=netBillAmount+netItemTotal-oldItemTotal;
                                System.out.println("net = "+netBillAmount+"  "+(item.getSalePrice()*item.getDiscount()/100)*additionalQuantity);
                                prevBalance=Double.parseDouble(textBalance.getText());
                                totalBalance=netBillAmount+prevBalance;
                                double itemProfit=(item.getSalePrice()-(item.getSalePrice()*item.getDiscount())/100-item.getPurchasePrice())*additionalQuantity + Double.parseDouble(labelProfit.getText());

                                labelProfit.setText(decimalFormat.format(itemProfit));
                                
                                tableBillItems.setValueAt(itemQuantity, i, 2);
                                tableBillItems.setValueAt(grossTotal, i, 5);
                                tableBillItems.setValueAt(netItemTotal, i, 6);
                                
                                textGrossTotal.setText(decimalFormat.format(grossBillAmount).toString());
                                textDiscount.setText(decimalFormat.format(grossBillAmount-netBillAmount).toString());
                                textBillAmount.setText(decimalFormat.format(netBillAmount).toString());
                                textTotalBalnce.setText(decimalFormat.format(totalBalance).toString());
                    
                                break;
                            }
                            i++;
                        }
                    } else {
                        billingItems.put(item.getId(), itemQuantity);
                        double grossTotal=Double.parseDouble(decimalFormat.format(item.getSalePrice()*itemQuantity));
                        double netItemTotal=Double.parseDouble(decimalFormat.format((grossTotal - ((grossTotal*item.getDiscount())/100))));
                        double prevBalance=0.0;
                        double totalBalance=0.0;
                        grossBillAmount=grossBillAmount+grossTotal;
                        netBillAmount=netBillAmount+netItemTotal;
                        prevBalance=Double.parseDouble(textBalance.getText());
                        totalBalance=netBillAmount+prevBalance;
                        double itemProfit=(item.getSalePrice()-(item.getSalePrice()*item.getDiscount())/100-item.getPurchasePrice())*itemQuantity + Double.parseDouble(labelProfit.getText());
                        
                        labelProfit.setText(decimalFormat.format(itemProfit));
                        Object[] rowData = {++billingRowCount,
                            item.getName(),
                            itemQuantity,
                            item.getSalePrice(),
                            item.getDiscount(),
                            grossTotal,
                            netItemTotal};

                        billingTablemodel.addRow(rowData);

                        textGrossTotal.setText(decimalFormat.format(grossBillAmount).toString());
                        textDiscount.setText(decimalFormat.format(grossBillAmount-netBillAmount).toString());
                        textBillAmount.setText(decimalFormat.format(netBillAmount).toString());
                        textPreviousBalance.setText(decimalFormat.format(prevBalance).toString());
                        textTotalBalnce.setText(decimalFormat.format(totalBalance).toString());
                    }
                    break;
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "Available stock for "+itemName+" is "+availableQuantity+"\n You entered more than available");
        }
    }

    
    private void loadCustomerDetail() {
        try {
            if (!textCustomerId.getText().equalsIgnoreCase("")) {
                Integer customerId = Integer.parseInt(textCustomerId.getText());
                CustomerLedger customerLedgerDetails = new LedgerClient().getCustomerLedger(customerId);

                if (customerLedgerDetails != null) {
                    Customer customer = customerLedgerDetails.getCustomerDetails();
                    List<Ledger> customerLedger = customerLedgerDetails.getCustomerLedger();

                    textCustomerName.setText(customer.getName());
                    textContact1.setText(customer.getContact1());
                    textContact2.setText(customer.getContact2());
                    textAddress.setText(customer.getAddress());

                    if (customerLedger.size() > 0) {
                        Ledger ledgerEntry = customerLedger.get(customerLedger.size() - 1);
                        if (ledgerEntry != null) {
                            if(ledgerEntry.getBalance().equals("")){
                                textBalance.setText("0.0");
                                textPreviousBalance.setText("0.0");
                            }else{
                                textBalance.setText(new DecimalFormat(".##").format(ledgerEntry.getBalance()).toString());
                                textPreviousBalance.setText(new DecimalFormat(".##").format(ledgerEntry.getBalance()).toString());
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Failed to load balance of customer : " + customerId);
                        }
                    }else{
                        textBalance.setText("0.0");
                        textPreviousBalance.setText("0.0");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to load detail of customer : " + customerId);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to load detail ");
        }
    }
    
    
    private void initBillingComponent() throws Exception {
        billingRowCount = 0;
        netBillAmount=0.0;
        billingItems = new HashMap<Integer, Integer>();
        itemsList = new ItemClient().get();
        itemsStock = new StockClient().get();
    }

    private void loadItemTable() throws Exception{
         if (itemsList != null && itemsStock != null) {
                itemTableTableModel = (DefaultTableModel) tableItems.getModel();
                itemTableTableModel.setRowCount(itemsList.size());
                tableItems.setModel(itemTableTableModel);
                int row = 0;
                for (Object itemObject : itemsList) {
                    Item item = (Item) itemObject;
                    tableItems.setValueAt(item.getName(), row, 0);
                    tableItems.setValueAt(getStock(item.getId()), row, 1);
                    tableItems.setValueAt(item.getVat(), row, 2);
                    tableItems.setValueAt(item.getDiscount(), row, 3);
                    row++;
                }
            }
    }
    
    private int getItemID(String itemName){
        for(Object itemObject : itemsList){
            Item item=(Item)itemObject;
            if(item.getName().equalsIgnoreCase(itemName)){
                return item.getId();
            }
        }
        return 0;
    }
    
  
    private Integer getStock(Integer itemId) {
        int availableStock = 0;
        try {
            if (itemsStock != null && itemsStock.size() > 0) {
                for (Object stockObject : itemsStock) {
                    Stock stock = (Stock) stockObject;
                    if (stock.getItemId() == itemId.intValue()) {
                        availableStock = stock.getAvailableStock();
                        break;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return availableStock;
    }

private Order buidOrder(){
    Order order=null;
    try {
        if(!textPaidAmount.getText().equals("")){
            Double paidAmount=Double.parseDouble(textPaidAmount.getText());
            Double billAmount=Double.parseDouble(textBillAmount.getText());
            Double ledgerBalance=Double.parseDouble(textBalance.getText());

            order=new Order();
            order.setBillDate(new Date(System.currentTimeMillis()));
            order.setCustomerId(Integer.parseInt(textCustomerId.getText()));
            order.setBillAmount(billAmount);
            order.setBillingItems(billingItems);
            order.setLedgerBalance(ledgerBalance);
            order.setPaidAmount(paidAmount);

            //System.out.println(order.getBillAmount()+" "+order.getBillDate()+" "+order.getCustomerId()+" "+order.getLedgerBalance()+" "+order.getPaidAmount());
            if(billingItems!=null){
                System.out.println("Item not null");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please enter payment amount");
        }
        
    } catch (Exception e) {
        e.printStackTrace();
    }
    return order;
}    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItem;
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JButton buttonBill;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonQuotation;
    private javax.swing.JButton buttonReset;
    private javax.swing.JButton buttonSearchCustomer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelHead;
    private javax.swing.JLabel labelProfit;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JPanel panelBillMemo;
    private javax.swing.JPanel panelCustomer;
    private javax.swing.JPanel panelHead;
    private javax.swing.JPanel panelItems;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JTable tableBillItems;
    private javax.swing.JTable tableItems;
    private javax.swing.JTextField textAddress;
    private javax.swing.JTextField textBalance;
    private javax.swing.JTextField textBillAmount;
    private javax.swing.JTextField textContact1;
    private javax.swing.JTextField textContact2;
    private javax.swing.JTextField textCustomerId;
    private javax.swing.JTextField textCustomerName;
    private javax.swing.JTextField textDiscount;
    private javax.swing.JTextField textGrossTotal;
    private javax.swing.JTextField textItemName;
    private javax.swing.JTextField textPaidAmount;
    private javax.swing.JTextField textPreviousBalance;
    private javax.swing.JTextField textTotalBalnce;
    // End of variables declaration//GEN-END:variables
}
